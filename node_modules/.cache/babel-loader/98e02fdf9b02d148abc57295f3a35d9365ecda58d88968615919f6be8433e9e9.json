{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/BradPoints/src/context/PointsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PointsContext = /*#__PURE__*/createContext();\nexport const usePoints = () => {\n  _s();\n  const context = useContext(PointsContext);\n  if (!context) {\n    throw new Error('usePoints must be used within a PointsProvider');\n  }\n  return context;\n};\n_s(usePoints, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PointsProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentPoints, setCurrentPoints] = useState(36);\n  const [redeemedRewards, setRedeemedRewards] = useState(new Set());\n  const [notifications, setNotifications] = useState([{\n    id: 1,\n    type: 'redemption',\n    title: 'Reward Redeemed!',\n    message: 'You successfully redeemed FREEDRINK for 25 points.',\n    timestamp: '2024-12-15T10:30:00',\n    read: false\n  }, {\n    id: 2,\n    type: 'new_reward',\n    title: 'New Reward Available!',\n    message: 'PARTYPACK200 is now available! Get Php 200 off group orders of 4+ people.',\n    timestamp: '2024-12-14T15:45:00',\n    read: false\n  }]);\n  const redeemReward = (rewardId, pointsRequired) => {\n    // Check if user has enough points\n    if (currentPoints < pointsRequired) {\n      alert(`You need ${pointsRequired} points to redeem this reward. You currently have ${currentPoints} points.`);\n      return false;\n    }\n\n    // Check if reward was already redeemed\n    if (redeemedRewards.has(rewardId)) {\n      alert('You have already redeemed this reward!');\n      return false;\n    }\n\n    // Deduct points and mark reward as redeemed\n    setCurrentPoints(prev => prev - pointsRequired);\n    setRedeemedRewards(prev => new Set([...prev, rewardId]));\n\n    // Create notification for reward redemption\n    const newNotification = {\n      id: Date.now(),\n      type: 'redemption',\n      title: 'Reward Redeemed!',\n      message: `You successfully redeemed a reward for ${pointsRequired} points.`,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n    alert(`Congratulations! You've successfully redeemed the reward for ${pointsRequired} points.`);\n    return true;\n  };\n  const isRewardRedeemed = rewardId => {\n    return redeemedRewards.has(rewardId);\n  };\n  const canRedeemReward = pointsRequired => {\n    return currentPoints >= pointsRequired;\n  };\n  const value = {\n    currentPoints,\n    setCurrentPoints,\n    redeemReward,\n    isRewardRedeemed,\n    canRedeemReward,\n    redeemedRewards,\n    notifications,\n    setNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(PointsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s2(PointsProvider, \"UBUMgInt3LnECPepBjuIsU3M+5w=\");\n_c = PointsProvider;\nvar _c;\n$RefreshReg$(_c, \"PointsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","PointsContext","usePoints","_s","context","Error","PointsProvider","children","_s2","currentPoints","setCurrentPoints","redeemedRewards","setRedeemedRewards","Set","notifications","setNotifications","id","type","title","message","timestamp","read","redeemReward","rewardId","pointsRequired","alert","has","prev","newNotification","Date","now","toISOString","isRewardRedeemed","canRedeemReward","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/BradPoints/src/context/PointsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst PointsContext = createContext();\n\nexport const usePoints = () => {\n  const context = useContext(PointsContext);\n  if (!context) {\n    throw new Error('usePoints must be used within a PointsProvider');\n  }\n  return context;\n};\n\nexport const PointsProvider = ({ children }) => {\n  const [currentPoints, setCurrentPoints] = useState(36);\n  const [redeemedRewards, setRedeemedRewards] = useState(new Set());\n  const [notifications, setNotifications] = useState([\n    {\n      id: 1,\n      type: 'redemption',\n      title: 'Reward Redeemed!',\n      message: 'You successfully redeemed FREEDRINK for 25 points.',\n      timestamp: '2024-12-15T10:30:00',\n      read: false\n    },\n    {\n      id: 2,\n      type: 'new_reward',\n      title: 'New Reward Available!',\n      message: 'PARTYPACK200 is now available! Get Php 200 off group orders of 4+ people.',\n      timestamp: '2024-12-14T15:45:00',\n      read: false\n    }\n  ]);\n\n  const redeemReward = (rewardId, pointsRequired) => {\n    // Check if user has enough points\n    if (currentPoints < pointsRequired) {\n      alert(`You need ${pointsRequired} points to redeem this reward. You currently have ${currentPoints} points.`);\n      return false;\n    }\n\n    // Check if reward was already redeemed\n    if (redeemedRewards.has(rewardId)) {\n      alert('You have already redeemed this reward!');\n      return false;\n    }\n\n    // Deduct points and mark reward as redeemed\n    setCurrentPoints(prev => prev - pointsRequired);\n    setRedeemedRewards(prev => new Set([...prev, rewardId]));\n    \n    // Create notification for reward redemption\n    const newNotification = {\n      id: Date.now(),\n      type: 'redemption',\n      title: 'Reward Redeemed!',\n      message: `You successfully redeemed a reward for ${pointsRequired} points.`,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    setNotifications(prev => [newNotification, ...prev]);\n    \n    alert(`Congratulations! You've successfully redeemed the reward for ${pointsRequired} points.`);\n    return true;\n  };\n\n  const isRewardRedeemed = (rewardId) => {\n    return redeemedRewards.has(rewardId);\n  };\n\n  const canRedeemReward = (pointsRequired) => {\n    return currentPoints >= pointsRequired;\n  };\n\n  const value = {\n    currentPoints,\n    setCurrentPoints,\n    redeemReward,\n    isRewardRedeemed,\n    canRedeemReward,\n    redeemedRewards,\n    notifications,\n    setNotifications\n  };\n\n  return (\n    <PointsContext.Provider value={value}>\n      {children}\n    </PointsContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}