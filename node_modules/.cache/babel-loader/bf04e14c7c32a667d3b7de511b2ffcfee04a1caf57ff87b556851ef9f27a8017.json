{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\BradPoints\\\\src\\\\context\\\\PointsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PointsContext = /*#__PURE__*/createContext();\nexport const usePoints = () => {\n  _s();\n  const context = useContext(PointsContext);\n  if (!context) {\n    throw new Error('usePoints must be used within a PointsProvider');\n  }\n  return context;\n};\n_s(usePoints, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PointsProvider = ({\n  children,\n  points,\n  updateUserPoints\n}) => {\n  _s2();\n  const [currentPoints, setCurrentPoints] = useState(points);\n  useEffect(() => {\n    setCurrentPoints(points);\n  }, [points]);\n  const [redeemedRewards, setRedeemedRewards] = useState(new Set());\n  const [notifications, setNotifications] = useState([]);\n  const redeemReward = async reward => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/redeem-reward.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        avail_reward_name: reward.reward_name,\n        avail_reward_points: reward.reward_points,\n        avail_reward_id: reward.id\n      })\n    });\n    const data = await response.json();\n    if (data.success) {\n      setCurrentPoints(Number(data.points)); // update points from backend\n      if (updateUserPoints) updateUserPoints(Number(data.points));\n      setNotifications(prev => [...prev, {\n        id: Date.now(),\n        type: 'redemption',\n        title: 'Reward Redeemed!',\n        message: data.message,\n        timestamp: new Date().toISOString(),\n        read: false\n      }]);\n      alert(data.message);\n      return true;\n    } else {\n      alert(data.message);\n      return false;\n    }\n  };\n  const isRewardClaimed = async rewardId => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-claim.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        reward_id: rewardId\n      })\n    });\n    const data = await response.json();\n    return data.claimed;\n  };\n  const isRewardRedeemed = async rewardId => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-redeem.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        avail_reward_id: rewardId\n      })\n    });\n    const data = await response.json();\n    return data.redeemed;\n  };\n  const canRedeemReward = pointsRequired => {\n    return currentPoints >= pointsRequired;\n  };\n  const value = {\n    currentPoints,\n    setCurrentPoints,\n    redeemReward,\n    isRewardRedeemed,\n    isRewardClaimed,\n    canRedeemReward,\n    redeemedRewards,\n    notifications,\n    setNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(PointsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n/* const redeemReward = (rewardId, pointsRequired) => {\r\n    // Check if user has enough points\r\n    if (currentPoints < pointsRequired) {\r\n      alert(`You need ${pointsRequired} points to redeem this reward. You currently have ${currentPoints} points.`);\r\n      return false;\r\n    }\r\n\r\n    // Check if reward was already redeemed\r\n    if (redeemedRewards.has(rewardId)) {\r\n      alert('You have already redeemed this reward!');\r\n      return false;\r\n    }\r\n\r\n    // Deduct points and mark reward as redeemed\r\n    setCurrentPoints(prev => prev - pointsRequired);\r\n    setRedeemedRewards(prev => new Set([...prev, rewardId]));\r\n    \r\n    // Create notification for reward redemption\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      type: 'redemption',\r\n      title: 'Reward Redeemed!',\r\n      message: `You successfully redeemed a reward for ${pointsRequired} points.`,\r\n      timestamp: new Date().toISOString(),\r\n      read: false\r\n    };\r\n    \r\n    setNotifications(prev => [newNotification, ...prev]);\r\n    \r\n    alert(`Congratulations! You've successfully redeemed the reward for ${pointsRequired} points.`);\r\n    return true;\r\n  }; */\n\n/*{\r\n    id: 1,\r\n    type: 'redemption',\r\n    title: 'Reward Redeemed!',\r\n    message: 'You successfully redeemed FREEDRINK for 25 points.',\r\n    timestamp: '2024-12-15T10:30:00',\r\n    read: false\r\n  },\r\n  {\r\n    id: 2,\r\n    type: 'new_reward',\r\n    title: 'New Reward Available!',\r\n    message: 'PARTYPACK200 is now available! Get Php 200 off group orders of 4+ people.',\r\n    timestamp: '2024-12-14T15:45:00',\r\n    read: false\r\n  }*/\n_s2(PointsProvider, \"VQfetnPABsKAMjIZCWhwTQ618hk=\");\n_c = PointsProvider;\nvar _c;\n$RefreshReg$(_c, \"PointsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PointsContext","usePoints","_s","context","Error","PointsProvider","children","points","updateUserPoints","_s2","currentPoints","setCurrentPoints","redeemedRewards","setRedeemedRewards","Set","notifications","setNotifications","redeemReward","reward","response","fetch","method","credentials","headers","body","URLSearchParams","avail_reward_name","reward_name","avail_reward_points","reward_points","avail_reward_id","id","data","json","success","Number","prev","Date","now","type","title","message","timestamp","toISOString","read","alert","isRewardClaimed","rewardId","reward_id","claimed","isRewardRedeemed","redeemed","canRedeemReward","pointsRequired","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/BradPoints/src/context/PointsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst PointsContext = createContext();\r\n\r\nexport const usePoints = () => {\r\n  const context = useContext(PointsContext);\r\n  if (!context) {\r\n    throw new Error('usePoints must be used within a PointsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const PointsProvider = ({ children, points, updateUserPoints }) => {\r\n  const [currentPoints, setCurrentPoints] = useState(points);\r\n\r\n  useEffect(() => {\r\n    setCurrentPoints(points);\r\n  }, [points]);\r\n\r\n  const [redeemedRewards, setRedeemedRewards] = useState(new Set());\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const redeemReward = async (reward) => {\r\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/redeem-reward.php\", {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: new URLSearchParams({\r\n        avail_reward_name: reward.reward_name,\r\n        avail_reward_points: reward.reward_points,\r\n        avail_reward_id: reward.id,\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    if (data.success) {\r\n      setCurrentPoints(Number(data.points)); // update points from backend\r\n      if (updateUserPoints) updateUserPoints(Number(data.points));\r\n      setNotifications((prev) => [\r\n        ...prev,\r\n        {\r\n          id: Date.now(),\r\n          type: 'redemption',\r\n          title: 'Reward Redeemed!',\r\n          message: data.message,\r\n          timestamp: new Date().toISOString(),\r\n          read: false,\r\n        },\r\n      ]);\r\n      alert(data.message);\r\n      return true;\r\n    } else {\r\n      alert(data.message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const isRewardClaimed = async (rewardId) => {\r\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-claim.php\", {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: new URLSearchParams({\r\n        reward_id: rewardId\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    return data.claimed;\r\n  }\r\n\r\n  const isRewardRedeemed = async (rewardId) => {\r\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-redeem.php\", {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: new URLSearchParams({\r\n        avail_reward_id: rewardId\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    return data.redeemed;\r\n  };\r\n\r\n  const canRedeemReward = (pointsRequired) => {\r\n    return currentPoints >= pointsRequired;\r\n  };\r\n\r\n  const value = {\r\n    currentPoints,\r\n    setCurrentPoints,\r\n    redeemReward,\r\n    isRewardRedeemed,\r\n    isRewardClaimed,\r\n    canRedeemReward,\r\n    redeemedRewards,\r\n    notifications,\r\n    setNotifications\r\n  };\r\n\r\n  return (\r\n    <PointsContext.Provider value={value}>\r\n      {children}\r\n    </PointsContext.Provider>\r\n  );\r\n};\r\n\r\n/* const redeemReward = (rewardId, pointsRequired) => {\r\n    // Check if user has enough points\r\n    if (currentPoints < pointsRequired) {\r\n      alert(`You need ${pointsRequired} points to redeem this reward. You currently have ${currentPoints} points.`);\r\n      return false;\r\n    }\r\n\r\n    // Check if reward was already redeemed\r\n    if (redeemedRewards.has(rewardId)) {\r\n      alert('You have already redeemed this reward!');\r\n      return false;\r\n    }\r\n\r\n    // Deduct points and mark reward as redeemed\r\n    setCurrentPoints(prev => prev - pointsRequired);\r\n    setRedeemedRewards(prev => new Set([...prev, rewardId]));\r\n    \r\n    // Create notification for reward redemption\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      type: 'redemption',\r\n      title: 'Reward Redeemed!',\r\n      message: `You successfully redeemed a reward for ${pointsRequired} points.`,\r\n      timestamp: new Date().toISOString(),\r\n      read: false\r\n    };\r\n    \r\n    setNotifications(prev => [newNotification, ...prev]);\r\n    \r\n    alert(`Congratulations! You've successfully redeemed the reward for ${pointsRequired} points.`);\r\n    return true;\r\n  }; */\r\n\r\n  /*{\r\n      id: 1,\r\n      type: 'redemption',\r\n      title: 'Reward Redeemed!',\r\n      message: 'You successfully redeemed FREEDRINK for 25 points.',\r\n      timestamp: '2024-12-15T10:30:00',\r\n      read: false\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 'new_reward',\r\n      title: 'New Reward Available!',\r\n      message: 'PARTYPACK200 is now available! Get Php 200 off group orders of 4+ people.',\r\n      timestamp: '2024-12-14T15:45:00',\r\n      read: false\r\n    }*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}