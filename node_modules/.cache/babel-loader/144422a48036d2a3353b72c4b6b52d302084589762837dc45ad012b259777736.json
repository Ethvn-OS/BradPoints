{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/BradPoints/src/context/PointsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PointsContext = /*#__PURE__*/createContext();\nexport const usePoints = () => {\n  _s();\n  const context = useContext(PointsContext);\n  if (!context) {\n    throw new Error('usePoints must be used within a PointsProvider');\n  }\n  return context;\n};\n_s(usePoints, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PointsProvider = ({\n  children,\n  points,\n  updateUserPoints\n}) => {\n  _s2();\n  const [currentPoints, setCurrentPoints] = useState(points);\n  useEffect(() => {\n    setCurrentPoints(points);\n  }, [points]);\n  const [redeemedRewards, setRedeemedRewards] = useState(new Set());\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const response = await fetch(\"http://localhost/BradPoints/php-backend/get-notifs.php\", {\n          credentials: 'include'\n        });\n        const data = await response.json();\n        const formatted = data.map(n => ({\n          id: n.id,\n          type: 'redemption',\n          title: 'Reward Redeemed!',\n          message: n.message,\n          timestamp: n.date_created,\n          read: false\n        }));\n        setNotifications(formatted);\n      } catch (err) {\n        console.error(\"Failed to fetch notifications:\", err);\n      }\n    };\n    fetchNotifications();\n  }, []);\n  const redeemReward = async reward => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/redeem-reward.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        avail_reward_name: reward.reward_name,\n        avail_reward_points: reward.reward_points,\n        avail_reward_id: reward.id\n      })\n    });\n    const data = await response.json();\n    if (data.success) {\n      setCurrentPoints(Number(data.points)); // update points from backend\n      if (updateUserPoints) updateUserPoints(Number(data.points));\n      setNotifications(prev => [...prev, {\n        id: Date.now(),\n        type: 'redemption',\n        title: 'Reward Redeemed!',\n        message: data.message,\n        timestamp: new Date().toISOString(),\n        read: false\n      }]);\n      alert(data.message);\n      return true;\n    } else {\n      alert(data.message);\n      return false;\n    }\n  };\n  const isRewardClaimed = async rewardId => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-claim.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        reward_id: rewardId\n      })\n    });\n    const data = await response.json();\n    return data.claimed;\n  };\n  const isRewardRedeemed = async rewardId => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-redeem.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        avail_reward_id: rewardId\n      })\n    });\n    const data = await response.json();\n    return data.redeemed;\n  };\n  const canRedeemReward = pointsRequired => {\n    return currentPoints >= pointsRequired;\n  };\n  const value = {\n    currentPoints,\n    setCurrentPoints,\n    redeemReward,\n    isRewardRedeemed,\n    isRewardClaimed,\n    canRedeemReward,\n    redeemedRewards,\n    notifications,\n    setNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(PointsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n/* const redeemReward = (rewardId, pointsRequired) => {\n    // Check if user has enough points\n    if (currentPoints < pointsRequired) {\n      alert(`You need ${pointsRequired} points to redeem this reward. You currently have ${currentPoints} points.`);\n      return false;\n    }\n\n    // Check if reward was already redeemed\n    if (redeemedRewards.has(rewardId)) {\n      alert('You have already redeemed this reward!');\n      return false;\n    }\n\n    // Deduct points and mark reward as redeemed\n    setCurrentPoints(prev => prev - pointsRequired);\n    setRedeemedRewards(prev => new Set([...prev, rewardId]));\n    \n    // Create notification for reward redemption\n    const newNotification = {\n      id: Date.now(),\n      type: 'redemption',\n      title: 'Reward Redeemed!',\n      message: `You successfully redeemed a reward for ${pointsRequired} points.`,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    setNotifications(prev => [newNotification, ...prev]);\n    \n    alert(`Congratulations! You've successfully redeemed the reward for ${pointsRequired} points.`);\n    return true;\n  }; */\n\n/*{\n    id: 1,\n    type: 'redemption',\n    title: 'Reward Redeemed!',\n    message: 'You successfully redeemed FREEDRINK for 25 points.',\n    timestamp: '2024-12-15T10:30:00',\n    read: false\n  },\n  {\n    id: 2,\n    type: 'new_reward',\n    title: 'New Reward Available!',\n    message: 'PARTYPACK200 is now available! Get Php 200 off group orders of 4+ people.',\n    timestamp: '2024-12-14T15:45:00',\n    read: false\n  }*/\n_s2(PointsProvider, \"XDaZbaAjz0Rxqnsw76mdHIyLwnI=\");\n_c = PointsProvider;\nvar _c;\n$RefreshReg$(_c, \"PointsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PointsContext","usePoints","_s","context","Error","PointsProvider","children","points","updateUserPoints","_s2","currentPoints","setCurrentPoints","redeemedRewards","setRedeemedRewards","Set","notifications","setNotifications","fetchNotifications","response","fetch","credentials","data","json","formatted","map","n","id","type","title","message","timestamp","date_created","read","err","console","error","redeemReward","reward","method","headers","body","URLSearchParams","avail_reward_name","reward_name","avail_reward_points","reward_points","avail_reward_id","success","Number","prev","Date","now","toISOString","alert","isRewardClaimed","rewardId","reward_id","claimed","isRewardRedeemed","redeemed","canRedeemReward","pointsRequired","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/BradPoints/src/context/PointsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst PointsContext = createContext();\n\nexport const usePoints = () => {\n  const context = useContext(PointsContext);\n  if (!context) {\n    throw new Error('usePoints must be used within a PointsProvider');\n  }\n  return context;\n};\n\nexport const PointsProvider = ({ children, points, updateUserPoints }) => {\n  const [currentPoints, setCurrentPoints] = useState(points);\n\n  useEffect(() => {\n    setCurrentPoints(points);\n  }, [points]);\n\n  const [redeemedRewards, setRedeemedRewards] = useState(new Set());\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const response = await fetch(\"http://localhost/BradPoints/php-backend/get-notifs.php\", {\n          credentials: 'include'\n        });\n\n        const data = await response.json();\n\n        const formatted = data.map(n => ({\n          id: n.id,\n          type: 'redemption',\n          title: 'Reward Redeemed!',\n          message: n.message,\n          timestamp: n.date_created,\n          read: false\n        }));\n\n        setNotifications(formatted);\n      } catch (err) {\n        console.error(\"Failed to fetch notifications:\", err);\n      }\n    };\n\n    fetchNotifications();\n  }, []);\n\n  const redeemReward = async (reward) => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/redeem-reward.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        avail_reward_name: reward.reward_name,\n        avail_reward_points: reward.reward_points,\n        avail_reward_id: reward.id,\n      }),\n    });\n    const data = await response.json();\n    if (data.success) {\n      setCurrentPoints(Number(data.points)); // update points from backend\n      if (updateUserPoints) updateUserPoints(Number(data.points));\n      setNotifications((prev) => [\n        ...prev,\n        {\n          id: Date.now(),\n          type: 'redemption',\n          title: 'Reward Redeemed!',\n          message: data.message,\n          timestamp: new Date().toISOString(),\n          read: false,\n        },\n      ]);\n      alert(data.message);\n      return true;\n    } else {\n      alert(data.message);\n      return false;\n    }\n  };\n\n  const isRewardClaimed = async (rewardId) => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-claim.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        reward_id: rewardId\n      }),\n    });\n    const data = await response.json();\n    return data.claimed;\n  }\n\n  const isRewardRedeemed = async (rewardId) => {\n    const response = await fetch(\"http://localhost/BradPoints/php-backend/check-redeem.php\", {\n      method: 'POST',\n      credentials: 'include',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        avail_reward_id: rewardId\n      }),\n    });\n    const data = await response.json();\n    return data.redeemed;\n  };\n\n  const canRedeemReward = (pointsRequired) => {\n    return currentPoints >= pointsRequired;\n  };\n\n  const value = {\n    currentPoints,\n    setCurrentPoints,\n    redeemReward,\n    isRewardRedeemed,\n    isRewardClaimed,\n    canRedeemReward,\n    redeemedRewards,\n    notifications,\n    setNotifications\n  };\n\n  return (\n    <PointsContext.Provider value={value}>\n      {children}\n    </PointsContext.Provider>\n  );\n};\n\n/* const redeemReward = (rewardId, pointsRequired) => {\n    // Check if user has enough points\n    if (currentPoints < pointsRequired) {\n      alert(`You need ${pointsRequired} points to redeem this reward. You currently have ${currentPoints} points.`);\n      return false;\n    }\n\n    // Check if reward was already redeemed\n    if (redeemedRewards.has(rewardId)) {\n      alert('You have already redeemed this reward!');\n      return false;\n    }\n\n    // Deduct points and mark reward as redeemed\n    setCurrentPoints(prev => prev - pointsRequired);\n    setRedeemedRewards(prev => new Set([...prev, rewardId]));\n    \n    // Create notification for reward redemption\n    const newNotification = {\n      id: Date.now(),\n      type: 'redemption',\n      title: 'Reward Redeemed!',\n      message: `You successfully redeemed a reward for ${pointsRequired} points.`,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    setNotifications(prev => [newNotification, ...prev]);\n    \n    alert(`Congratulations! You've successfully redeemed the reward for ${pointsRequired} points.`);\n    return true;\n  }; */\n\n  /*{\n      id: 1,\n      type: 'redemption',\n      title: 'Reward Redeemed!',\n      message: 'You successfully redeemed FREEDRINK for 25 points.',\n      timestamp: '2024-12-15T10:30:00',\n      read: false\n    },\n    {\n      id: 2,\n      type: 'new_reward',\n      title: 'New Reward Available!',\n      message: 'PARTYPACK200 is now available! Get Php 200 off group orders of 4+ people.',\n      timestamp: '2024-12-14T15:45:00',\n      read: false\n    }*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}